---
description: USE migration-first approach when MODIFYING_DATABASE to ENSURE_SCHEMA_CONSISTENCY
globs: supabase/**/*.sql, supabase/seeder/**/*.js
---

# Supabase Migration Workflow

<version>1.0.0</version>

## Context
- When making any changes to the database schema
- When adding, modifying, or removing tables, columns, constraints, etc.
- When updating database functions, triggers, or policies
- When seeding data that depends on schema structure

## Requirements
- MUST create a new migration for ANY database schema change
- MUST run `supabase migration new migration_description` before making changes
- MUST run `supabase migration up` after creating the migration to apply changes
- MUST update the initial seeder script if schema changes affect seeded data
- MUST test migrations locally before committing
- MUST use descriptive migration names that clearly indicate the purpose
- MUST NOT modify existing migrations that have been applied
- MUST create new "fix" migrations instead of modifying existing ones
- MUST document the purpose of each migration with comments

## Examples

<example>
// Good: Creating and applying a new migration
```bash
# 1. Create a new migration file
supabase migration new add_status_column_to_stones

# 2. Edit the migration file with the schema changes
# In the generated SQL file:
ALTER TABLE public.stones ADD COLUMN status TEXT DEFAULT 'available';

# 3. Apply the migration
supabase migration up

# 4. Update seeder if needed
# In initial.js, update TEST_STONE:
const TEST_STONE = {
  // existing properties
  status: 'available',
  // other properties
};
```
</example>

<example type="invalid">
// Bad: Modifying database without migration
```bash
# Directly modifying the database without creating a migration
psql -d postgres -c "ALTER TABLE public.stones ADD COLUMN status TEXT;"

# Or making changes through the Supabase UI without creating a migration
```
</example>

<example type="invalid">
// Bad: Modifying an existing migration that's already been applied
```bash
# Editing a migration file that has already been applied
# This will cause inconsistencies between environments
vim supabase/migrations/20230101000000_initial_schema.sql
```
</example>

<example>
// Good: Fixing an issue with a new migration instead of modifying existing one
```bash
# Create a new migration to fix an issue
supabase migration new fix_status_column_type

# In the new migration file:
ALTER TABLE public.stones ALTER COLUMN status TYPE VARCHAR(50);
```
</example>

<example>
// Good: Updating seeder after schema changes
```javascript
// In initial.js, after adding a new required field to the schema:
const TEST_STONE = {
  name: "Test Diamond",
  weight: 2.5,
  color: "Clear",
  // New field added to schema
  clarity: "VS1",
  // Other existing fields
};
```
</example>

## Process Flow
1. Create a new migration file with `supabase migration new description`
2. Edit the generated SQL file with your schema changes
3. Apply the migration with `supabase migration up`
4. Test the changes locally
5. Update the seeder script if the schema changes affect seeded data
6. Commit both the migration and updated seeder 