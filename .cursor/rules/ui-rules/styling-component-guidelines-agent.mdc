---
description: This rule governs UI component creation and styling across the project. It should be applied whenever: (1) Creating new UI components, (2) Modifying existing components, (3) Applying styles to components, (4) Selecting components for use in the application. The rule ensures consistent styling approach using NativeWind/TailwindCSS and proper component selection process. It's particularly important for maintaining UI consistency and optimizing for Expo compatibility.
globs: 
alwaysApply: true
---

# Styling and Component Selection Guidelines

## Critical Rules

- Use NativeWind/TailwindCSS for styling all new components
- Check the project's components folder first before using external libraries
- If a suitable component is not found in the components folder, use React Native Paper
- Avoid using StyleSheet from React Native when possible
- Prioritize components with Expo compatibility
- ALWAYS use Tailwind CSS classes (className prop) for styling components instead of StyleSheet
- NEVER create or use StyleSheet.create() for styling components
- Convert all inline styles to equivalent Tailwind classes
- Use style prop only when absolutely necessary for dynamic values that cannot be expressed in Tailwind
- Maintain proper flex container hierarchies with Tailwind's flex classes
- Ensure proper height handling with h-full and flex-1 classes for containers
- When components don't support className (like some third-party components), use minimal inline styles only for those specific components
- When migrating existing StyleSheet code, convert ALL styles to Tailwind equivalents
- Position elements at the bottom of containers using mt-auto instead of position absolute
- Use proper Tailwind spacing and sizing classes instead of fixed pixel values


## Examples

<example>
// Good: Using NativeWind/Tailwind for styling
import { View, Text } from "react-native";
import { styled } from "nativewind";

const StyledView = styled(View);
const StyledText = styled(Text);

export function MyComponent() {
  return (
    <StyledView className="p-4 bg-white dark:bg-gray-800 rounded-lg">
      <StyledText className="text-lg font-bold text-gray-900 dark:text-white">
        Hello World
      </StyledText>
    </StyledView>
  );
}
</example>

<example type="invalid">
// Bad: Using StyleSheet from React Native
import { View, Text, StyleSheet } from "react-native";

export function MyComponent() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Hello World</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 16,
    backgroundColor: "#fff",
    borderRadius: 8,
  },
  text: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#333",
  },
});
</example> 