---
description: This rule governs the Test-Driven Development documentation process. It should be applied whenever: (1) Implementing complex features or significant changes, (2) Tasks requiring multiple steps or components, (3) Implementation needs to be broken down into atomic units, (4) Planning new features with dependencies. The rule ensures structured implementation approach through proper documentation. It's particularly important for maintaining implementation quality and meeting requirements.
globs: 
alwaysApply: false
---

# TDD Documentation Workflow

## Critical Rules

- Create a TDD document in `.ai/tdd/` before starting implementation
- Ensure the `.ai` folder is added to `.gitignore` to prevent committing TDD documents
- Create a new file for each TDD request with a descriptive name and date (e.g., `multilanguage-support-20230403.md`)
- Document must include problem statement, requirements, solution architecture
- Break down tasks into atomic units with acceptance criteria
- Document dependencies between tasks and testing strategy
- Review and update the TDD document after each implementation step
- Mark completed tasks and document remaining work
- Ensure each implementation step aligns with the documented plan
- Reference the TDD document when implementing related features

## Examples

<example>
# Feature: User Authentication System
## Problem Statement
Need to implement secure user authentication with email verification.

## Tasks
- [ ] 1. Create user registration endpoint
- [ ] 2. Implement password hashing
- [ ] 3. Create email verification flow
- [ ] 4. Implement login endpoint
- [ ] 5. Add password reset functionality

## Implementation Plan
Starting with task 1: Create database schema for users table...
</example>

<example type="invalid">
Let's implement user authentication. First I'll create a login form, then add some validation...

This lacks proper planning, doesn't break down the implementation into atomic tasks, and doesn't provide a clear path for implementation.
</example> 